name: Build and Push Docker Images

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  GO_VERSION: '1.25'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: ./Dockerfile.client
            image: ghcr.io/philipschmid/flow-generator
            build-args: |
              VERSION=${{ github.ref_name }}
              BUILD_DATE=${{ github.event.repository.updated_at }}
              GIT_COMMIT=${{ github.sha }}
          - dockerfile: ./Dockerfile.server
            image: ghcr.io/philipschmid/echo-server
            build-args: |
              VERSION=${{ github.ref_name }}
              BUILD_DATE=${{ github.event.repository.updated_at }}
              GIT_COMMIT=${{ github.sha }}
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker images
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          sbom: true
          provenance: mode=max
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: ${{ matrix.build-args }}

      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@0.32.0
        with:
          image-ref: ${{ matrix.image }}@${{ steps.build.outputs.digest }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate SBOM
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ matrix.image }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ strategy.job-index }}
          path: sbom.spdx.json
          retention-days: 30

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          CURRENT_TAG=${GITHUB_REF#refs/tags/}

          if [ -z "$PREV_TAG" ]; then
            echo "First release"
            CHANGELOG="Initial release of flow-generator-app"
          else
            # Generate changelog from commits
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREV_TAG..$CURRENT_TAG)
          fi

          # Save to file for release notes
          cat > release-notes.md << EOF
          ## What's Changed

          $CHANGELOG

          ## Docker Images

          ### Echo Server
          \`\`\`bash
          docker pull ghcr.io/philipschmid/echo-server:${CURRENT_TAG}
          docker pull ghcr.io/philipschmid/echo-server:latest
          \`\`\`

          ### Flow Generator
          \`\`\`bash
          docker pull ghcr.io/philipschmid/flow-generator:${CURRENT_TAG}
          docker pull ghcr.io/philipschmid/flow-generator:latest
          \`\`\`

          ## Full Changelog

          https://github.com/${{ github.repository }}/compare/${PREV_TAG}...${CURRENT_TAG}
          EOF

          echo "version=${CURRENT_TAG}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: release-notes.md
          generate_release_notes: false
          draft: false
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha') || contains(github.ref, '-pre') }}
          make_latest: true