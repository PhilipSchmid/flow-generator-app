name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

env:
  GO_VERSION: '1.24'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23', '1.24']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Get dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        if: matrix.go-version == env.GO_VERSION
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.out
          flags: unittests
          fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.32.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif ./...'

      - name: Upload gosec scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'gosec-results.sarif'

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build binaries
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          mkdir -p dist/${{ matrix.os }}_${{ matrix.arch }}
          go build -trimpath -ldflags="-s -w" -o dist/${{ matrix.os }}_${{ matrix.arch }}/echo-server ./cmd/server
          go build -trimpath -ldflags="-s -w" -o dist/${{ matrix.os }}_${{ matrix.arch }}/flow-generator ./cmd/client

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/${{ matrix.os }}_${{ matrix.arch }}/*
          retention-days: 7

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Linux AMD64 binaries
        uses: actions/download-artifact@v5
        with:
          name: binaries-linux-amd64
          path: ./bin

      - name: Make binaries executable
        run: chmod +x ./bin/*

      - name: Run integration test
        run: |
          # Start echo server
          ./bin/echo-server --tcp_ports_server 8080,8081 --udp_ports_server 9000 &
          SERVER_PID=$!
          sleep 2
          
          # Run flow generator
          ./bin/flow-generator --server localhost --tcp_ports 8080,8081 --udp_ports 9000 --rate 10 --flow_timeout 5 &
          CLIENT_PID=$!
          
          # Wait for client to complete (flow_timeout is 5 seconds)
          wait $CLIENT_PID
          CLIENT_EXIT_CODE=$?
          
          # Check if client exited successfully
          if [ $CLIENT_EXIT_CODE -ne 0 ]; then
            echo "Client exited with error code: $CLIENT_EXIT_CODE"
            exit 1
          fi
          
          # Check if server is still running
          if ! kill -0 $SERVER_PID 2>/dev/null; then
            echo "Server crashed during test"
            exit 1
          fi
          
          # Stop processes
          kill $CLIENT_PID $SERVER_PID || true
          wait $CLIENT_PID $SERVER_PID 2>/dev/null || true
          
          echo "Integration test passed!"

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    strategy:
      matrix:
        include:
          - dockerfile: ./Dockerfile.client
            image: flow-generator
          - dockerfile: ./Dockerfile.server
            image: echo-server
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: false
          load: true
          tags: ${{ matrix.image }}:test
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@0.32.0
        with:
          image-ref: ${{ matrix.image }}:test
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

  all-checks-passed:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [lint, test, security, build, integration-test, docker-build]
    steps:
      - name: All checks passed
        run: echo "All CI checks passed successfully!"